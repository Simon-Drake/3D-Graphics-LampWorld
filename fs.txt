#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;
uniform sampler2D third_texture;



struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light1;  
uniform Light light2;  
uniform Light light3;  
uniform Light light4;  

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

void main() {
  // Ambient
  vec3 ambient = light1.ambient * vec3(texture(first_texture, aTexCoord));

  // Diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir1 = normalize(light1.position - aPos);  
  vec3 lightDir2 = normalize(light2.position - aPos);  
  vec3 lightDir3 = normalize(light3.position - aPos);  
  float diff1 = max(dot(norm, lightDir1), 0.0);
  float diff2 = max(dot(norm, lightDir2), 0.0);
  float diff3 = max(dot(norm, lightDir2), 0.0);
  
  vec3 diffuse = light1.diffuse * (diff1 * material.diffuse) * texture(first_texture, aTexCoord).rgb + light2.diffuse * (diff2 * material.diffuse) * texture(first_texture, aTexCoord).rgb;
  vec3 diffuseS = light1.diffuse * (diff1 * material.diffuse) * texture(first_texture, aTexCoord).rgb + light2.diffuse * (diff2 * material.diffuse) * texture(first_texture, aTexCoord).rgb + light3.diffuse * (diff3 * material.diffuse) * texture(first_texture, aTexCoord).rgb;

  // Spotlight
  vec3 orientation = normalize(light4.position - light3.position);
  float theta = dot(lightDir3, orientation);

  // Specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir1 = reflect(-lightDir1, norm);
  float spec1 = pow(max(dot(viewDir, reflectDir1), 0.0), material.shininess);
  vec3 reflectDir2 = reflect(-lightDir2, norm);  
  float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), material.shininess);
  vec3 reflectDir3 = reflect(-lightDir2, norm);  
  float spec3 = pow(max(dot(viewDir, reflectDir2), 0.0), material.shininess);

  vec3 specular = light1.specular * spec1 * vec3(texture(first_texture, aTexCoord)) + (light2.specular * spec2 * material.specular);
  vec3 specularS = light1.specular * spec1 * vec3(texture(first_texture, aTexCoord)) + (light2.specular * spec2 * material.specular) + (light3.specular * spec3 * material.specular);

  if(theta > 0.97){
    vec3 result = ambient + diffuseS + specularS;
    fragColor = vec4(result, 1.0);
  }
  else{
    vec3 result = ambient + diffuse + specular;
    fragColor = vec4(result, 1.0);
  }
}